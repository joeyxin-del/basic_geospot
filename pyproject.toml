[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "geo-detection"
version = "0.1.0"
description = "一个基于深度学习的地理目标检测项目"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    # 注意：PyTorch 相关包需要单独安装，请参考 README.md 中的安装说明
    
    # 图像处理
    "pillow>=10.0.0",
    "opencv-python>=4.11.0",
    
    # 数据处理
    "numpy>=1.24.0",
    "pandas>=1.5.0",
    
    # 配置管理
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    
    # 实验跟踪
    "wandb>=0.15.0",
    
    # 数据验证
    "pydantic>=2.0.0",
    
    # 进度条
    "tqdm>=4.65.0",
    
    # 系统监控
    "psutil>=5.9.0",
    
    # 数据序列化
    "protobuf>=4.0.0",
    
    # 类型检查
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    # 测试
    "pytest>=7.0.0",
    "coverage>=7.0.0",
    "pytest-cov>=4.0.0",
    
    # 代码质量
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    
    # 开发工具
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/geo-detection"
Repository = "https://github.com/yourusername/geo-detection.git"
Issues = "https://github.com/yourusername/geo-detection/issues"

[project.scripts]
geo-train = "scripts.train:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black 配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除的目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort 配置
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# MyPy 配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "wandb.*",
    "hydra.*",
    "omegaconf.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage 配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 